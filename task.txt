・スクロールすると続きの投稿が読み取れるようにする（ページネーション）
・画像をアップロードすると即時反映される
・エラーメッセージをポップアップで表示させる

<% if current_user.favorites.present? %>
<% else %>
<a class="glyphicon glyphicon-check favorite-list"></a>
<% end %>

- HTML,CSS,bootstrapを使用して、現実のInstagramに似せたデザインにすること（任意　詳しくは後述）
- Githubにソースコードを送信し、そのリポジトリのURLを提出すること
- Herokuにアップロードしてある状態であること
- .envファイルを作成し、それをGitに上げないようにする設定をしておくこと
- 辞書ファイルで、エラーメッセージやモデル名などの国際化がされていること
- 変数名やアソシエーション名は具体的で、一目見て概ね理解できる名前にすること
- Gitのコミットメッセージが、一目見てそのコミットで何をしたかがわかるものであること
- 一つの機能を作成したら、一つのコミットをするようにすること（下記ヒントあり）
- インデントは半角スペース二つで揃えること
- Gemfileはコメント行をあらかじめ消しておくこと
- 改行は意味のある単位で行なった方がみやすいため、そうすること
- 意味のない空行は消しておく
- ロケット記法は使わないこと
- 変数やアソシエーション名は、機能に関連した名前づけを心がけ、good_answersのようにスネークケースできちんと単語を分けること
- 変数やアソシエーション名に省略した名称は基本的に使わない(意味を予測しづらいため)
- privateより下の行はprivateと同じレベルのインデントにする
- updateなどの記述の際、バリデーションが発火した時の処理も考慮しておくこと。（レンダリングするviewが見つけられなくてエラーになったりしないように注意する）
- あなたの地域のタイムゾーンに設定すること（下記ヒントあり）
- gemの追加はletter_opener_web, bootstrap, jquery-rails, bcrypt, デバッグ関係のみに限定すること。


ok- Ruby on Railsを使ったアプリケーションであること
ok- pictureの投稿・投稿確認・編集・一覧表示・詳細画面・削除機能があること（CRUD機能）
ok- userのプロフィール画像が登録できること
ok- userのプロフィール編集機能があること
ok- 他人の投稿・プロフィールが編集できないように、controllerでアクセス制限をかけ、さらにviewではボタンを非表示にすること。
ok- ログイン機能があること（deviseなどのgemは使わないこと）
ok- UserとPictureをひも付けて誰がPictureを投稿したか分かるようにすること
ok- 画像と文章が投稿できるようにすること
ok- pictureをお気に入りし、お気に入りのpictureの一覧画面を、新しいルーティングのページで作成すること
ok- CSS、JavaScript、Helperのファイルをrails g コマンドで自動生成しない設定を記述して、これらの余分なファイルができないようにすること（下記ヒントあり）
ok- pictureを投稿した際、投稿者に確認メールが届くようにすること
ok- 404,500のエラーページを実装すること
ok- Userに関する50件分のseedデータを投入できるコードを用意すること
（herokuに適用する必要はありません）

自己課題
ok・返信コメントが書けるようにする
ok・ニックネームが入力できるようにする
ok・いいねボタンを実装する
ok・ユーザー画像のデフォルト画像を設定
（現状は画像がない場合に、default.pngへのリンクを実装）
